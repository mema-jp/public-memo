もちろんです！GitLab CI + Claude APIを使ったコード品質チェックの方案を日本語で説明します。

## 実装方案

**GitLab CI + Claude APIでコード品質をチェックする方法**

```yaml
# .gitlab-ci.yml
stages:
  - code-quality

ai-code-review:
  stage: code-quality
  image: python:3.9
  script:
    - pip install anthropic
    - python ai_code_check.py
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  allow_failure: false
```

## Pythonスクリプト

```python
# ai_code_check.py
import anthropic
import subprocess
import os

def get_code_diff():
    """コードの差分を取得する"""
    result = subprocess.run(
        ['git', 'diff', 'origin/main...HEAD'],
        capture_output=True, text=True
    )
    return result.stdout

def check_code_quality(diff_content):
    """Claude APIを使ってコード品質をチェックする"""
    client = anthropic.Anthropic(
        api_key=os.environ['ANTHROPIC_API_KEY']
    )
    
    message = client.messages.create(
        model="claude-3-sonnet-20240229",
        max_tokens=1000,
        messages=[{
            "role": "user",
            "content": f"""
            以下のコード変更の品質をチェックしてください。重点的に確認する項目：
            1. コーディング規約とスタイルの一貫性
            2. 潜在的なバグとセキュリティ問題
            3. パフォーマンスの問題
            4. 保守性と可読性
            5. エラーハンドリング
            
            重大な問題が見つかった場合は、回答の冒頭に「FAIL:」を付けてください
            コード品質が良好な場合は、回答の冒頭に「PASS:」を付けてください
            
            具体的な問題点と改善提案も含めてください。
            
            コード変更内容：
            {diff_content}
            """
        }]
    )
    
    response = message.content[0].text
    
    if response.startswith("FAIL:"):
        print(f"❌ コード品質チェックが失敗しました:\n{response}")
        return False
    else:
        print(f"✅ コード品質チェックが合格しました:\n{response}")
        return True

def main():
    """メイン処理"""
    print("🚀 AIコード品質チェックを開始します...")
    
    # コード差分を取得
    diff = get_code_diff()
    if not diff.strip():
        print("📝 コード変更がありません。チェックをスキップします。")
        exit(0)
    
    print(f"📊 {len(diff.splitlines())} 行のコード変更を検出しました。")
    
    # コード品質をチェック
    if not check_code_quality(diff):
        print("💥 CIを失敗させます。")
        exit(1)
    
    print("🎉 コード品質チェックが完了しました。")

if __name__ == "__main__":
    main()
```

## 環境設定

**1. GitLabプロジェクトの設定**

- Settings → CI/CD → Variables で以下を追加：
  - `ANTHROPIC_API_KEY`: Claude APIキー（Protected変数として設定）

**2. より詳細なチェック設定**

```python
# config.py
CODE_QUALITY_RULES = {
    "max_lines_per_function": 50,
    "max_complexity": 10,
    "required_test_coverage": 80,
    "security_check": True,
    "performance_check": True
}

# チェック用のプロンプトをより詳細に設定
QUALITY_CHECK_PROMPT = """
コード品質チェックを実行してください：

【チェック項目】
1. 🎯 コーディング規約（命名規則、インデント、コメント）
2. 🐛 バグの可能性（null参照、境界値エラーなど）
3. 🔒 セキュリティ問題（SQLインジェクション、XSSなど）
4. ⚡ パフォーマンス（効率的なアルゴリズム、メモリ使用量）
5. 🔧 保守性（関数の長さ、複雑度、再利用性）
6. 🧪 テスト可能性

【判定基準】
- 重大な問題がある場合：FAIL: で開始
- 軽微な改善提案のみ：PASS: で開始

【出力形式】
PASS/FAIL: [判定結果]
問題点：[具体的な問題とその理由]
改善提案：[推奨する修正方法]
評価：[A-F での評価]
"""
```

## 使用方法

1. 上記のファイルをリポジトリのルートに配置
1. GitLabでAPIキーを設定
1. Merge Requestを作成すると自動的にチェックが実行されます

これでMerge Request時に自動的にAIがコード品質をチェックし、問題があればCIが失敗するようになります。

何かご質問や追加の機能が必要でしたら、お聞かせください！​​​​​​​​​​​​​​​​





ありがとうございます！日本語版の最適化されたプロンプトとCI実行制御について説明します。

## プロンプトの最適化

**最適化されたプロンプトの例**

```python
def get_optimized_prompt(diff_content, file_types, commit_message=""):
    prompt = f"""
あなたは経験豊富なコードレビューの専門家です。以下のコード変更について包括的な品質評価を行ってください。

【コード変更情報】
- コミットメッセージ: {commit_message}
- ファイルタイプ: {', '.join(file_types)}
- 変更規模: {len(diff_content.splitlines())} 行

【評価基準】
1. 🔧 コード品質 (配点30%)
   - 命名規則、コード構造、コメントの質
   - 関数の複雑さ、コードの重複

2. 🐛 潜在的な問題 (配点25%)
   - バグリスク、境界条件の処理
   - 例外処理、リソースリーク

3. 🔒 セキュリティ (配点20%)
   - 入力検証、権限制御
   - 機密情報の漏洩

4. ⚡ パフォーマンス (配点15%)
   - アルゴリズムの効率性、データベースクエリ最適化
   - メモリ使用量、並行安全性

5. 🧪 テスト可能性 (配点10%)
   - テストの書きやすさ
   - 依存性注入、モジュール化

【出力形式】
ステータス: [PASS/WARN/FAIL]
総合点数: [0-100点]

問題リスト:
- 🔴 重大な問題 (ブロッキング): [具体的な説明]
- 🟡 改善提案 (非ブロッキング): [具体的な説明]
- 🟢 優秀な実装: [称賛すべき点]

修正提案:
[具体的なコード修正案]

【判定ルール】
- 点数 >= 80: PASS
- 点数 60-79: WARN (警告を出すがブロックしない)
- 点数 < 60: FAIL (マージをブロック)

コード変更内容:
```

{diff_content}

```
    """
    return prompt
```

**言語別特化プロンプト**

```python
LANGUAGE_SPECIFIC_RULES = {
    "python": {
        "style": "PEP 8標準",
        "focus": ["型アノテーション", "例外処理", "ジェネレーター使用", "デコレーターの妥当性"]
    },
    "javascript": {
        "style": "ESLint標準", 
        "focus": ["async/await使用", "メモリリーク", "DOM操作の安全性", "バンドルサイズへの影響"]
    },
    "java": {
        "style": "Google Java Style",
        "focus": ["null チェック", "リソース管理", "並行安全性", "パフォーマンス最適化"]
    },
    "go": {
        "style": "Go fmt標準",
        "focus": ["goroutineリーク", "エラーハンドリング", "インターフェース設計", "メモリ割り当て"]
    }
}

def get_language_specific_prompt(language, diff_content):
    rules = LANGUAGE_SPECIFIC_RULES.get(language, {})
    
    return f"""
{language}のコードレビューを実行します。

【言語固有のチェック項目】
- コーディングスタイル: {rules.get('style', '一般的な標準')}
- 重点チェック項目: {', '.join(rules.get('focus', []))}

【コード変更】
{diff_content}

上記の{language}固有の観点から、コードの品質を評価してください。
    """
```

## CI実行回数の制御

**方案1: ブランチと条件による制御**

```yaml
# .gitlab-ci.yml
ai-code-review:
  stage: code-quality
  image: python:3.9
  script:
    - python ai_code_check.py
  rules:
    # MRの時のみ実行
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    # 特定ブランチへのMRのみ
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main"
    # ドラフトMRを除外
    - if: $CI_MERGE_REQUEST_TITLE !~ /^Draft:/
    # 営業時間のみ実行（オプション）
    - if: $CI_PIPELINE_CREATED_AT =~ /T(09|10|11|12|13|14|15|16|17):/
  allow_failure: true  # trueにすると警告のみでブロックしない
```

**方案2: 変更規模による制御**

```python
def should_run_ai_check():
    """AI チェックを実行するかどうかを判定"""
    diff = get_code_diff()
    lines_changed = len([l for l in diff.splitlines() if l.startswith(('+', '-'))])
    
    # 小さな変更はAIチェックをスキップ
    if lines_changed < 10:
        print("🔄 変更が小さいため、AIチェックをスキップします")
        return False
    
    # 大きすぎる変更は分割を推奨
    if lines_changed > 1000:
        print("📦 変更が大きすぎます。分割してのコミットを推奨します")
        return False
        
    # ファイルタイプをチェック
    changed_files = get_changed_files()
    code_files = [f for f in changed_files if is_code_file(f)]
    
    if not code_files:
        print("📄 コードファイルの変更がないため、AIチェックをスキップします")
        return False
        
    return True

def is_code_file(filename):
    """コードファイルかどうかを判定"""
    code_extensions = ['.py', '.js', '.java', '.go', '.cpp', '.c', '.php', '.rb']
    return any(filename.endswith(ext) for ext in code_extensions)
```

**方案3: ラベルと設定による制御**

```yaml
# 特定のラベルが付いた時のみ実行
ai-code-review:
  script:
    - python ai_code_check.py
  rules:
    - if: $CI_MERGE_REQUEST_LABELS =~ /ai-review/
  
# コミットメッセージによる制御
ai-code-review-optional:
  script:
    - python ai_code_check.py
  rules:
    - if: $CI_COMMIT_MESSAGE =~ /\[ai-check\]/
```

**方案4: 段階的チェック戦略**

```python
def get_check_level():
    """異なる条件に基づいてチェックレベルを決定"""
    if os.environ.get('CI_MERGE_REQUEST_LABELS', '').find('critical') != -1:
        return 'full'  # 完全なAIチェック
    elif is_hotfix_branch():
        return 'security'  # セキュリティ問題のみチェック
    elif is_feature_branch():
        return 'basic'  # 基本チェック
    else:
        return 'skip'  # チェックをスキップ

def is_hotfix_branch():
    """ホットフィックスブランチかどうかを判定"""
    branch_name = os.environ.get('CI_COMMIT_REF_NAME', '')
    return 'hotfix' in branch_name or 'urgent' in branch_name

def is_feature_branch():
    """フィーチャーブランチかどうかを判定"""
    branch_name = os.environ.get('CI_COMMIT_REF_NAME', '')
    return branch_name.startswith('feature/') or branch_name.startswith('feat/')

# チェックスクリプトでの使用例
check_level = get_check_level()
if check_level == 'skip':
    print("⏭️  AIチェックをスキップします")
    exit(0)
elif check_level == 'basic':
    prompt = get_basic_prompt(diff)
    print("🔍 基本チェックを実行します")
elif check_level == 'security':
    prompt = get_security_prompt(diff)
    print("🔒 セキュリティチェックを実行します")
else:
    prompt = get_full_prompt(diff)
    print("🔬 完全なAIチェックを実行します")
```

**方案5: コスト制御**

```python
import datetime
import os

def check_usage_limit():
    """使用量制限をチェック"""
    today = datetime.datetime.now().strftime('%Y-%m-%d')
    usage_file = f'/tmp/ai_usage_{today}.txt'
    
    current_count = 0
    if os.path.exists(usage_file):
        with open(usage_file, 'r') as f:
            current_count = int(f.read().strip() or '0')
    
    daily_limit = 50  # 1日の制限回数
    if current_count >= daily_limit:
        print(f"⚠️  本日のAIチェック回数が上限（{daily_limit}回）に達しました")
        return False
    
    # 使用回数を更新
    with open(usage_file, 'w') as f:
        f.write(str(current_count + 1))
    
    print(f"📊 本日のAIチェック使用回数: {current_count + 1}/{daily_limit}")
    return True

def check_monthly_budget():
    """月次予算をチェック"""
    month = datetime.datetime.now().strftime('%Y-%m')
    budget_file = f'/tmp/ai_budget_{month}.txt'
    
    # 概算コスト計算（例：1回のチェックで0.05ドル）
    cost_per_check = 0.05
    monthly_budget = 100.0  # 月次予算100ドル
    
    if os.path.exists(budget_file):
        with open(budget_file, 'r') as f:
            used_budget = float(f.read().strip() or '0')
    else:
        used_budget = 0
    
    if used_budget + cost_per_check > monthly_budget:
        print(f"💰 月次予算（${monthly_budget}）を超過します。現在の使用額: ${used_budget:.2f}")
        return False
    
    # 予算使用量を更新
    with open(budget_file, 'w') as f:
        f.write(str(used_budget + cost_per_check))
    
    return True
```

**推奨設定の組み合わせ**

```yaml
# 実用的なCI設定
ai-code-review:
  stage: code-quality
  image: python:3.9
  script:
    - python optimized_ai_check.py
  rules:
    # 主要ブランチへのMRのみ実行
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && 
          ($CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main" || 
           $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "develop")
    # ドキュメント変更のみの場合は除外
    - changes:
        - "**/*.py"
        - "**/*.js"
        - "**/*.java"
        - "**/*.go"
        - "**/*.php"
        - "**/*.rb"
  allow_failure: true
  timeout: 5m  # 長時間の待機を避ける
  retry:
    max: 2
    when: runner_system_failure
```

**完全な最適化スクリプト例**

```python
# optimized_ai_check.py
import anthropic
import subprocess
import os
import datetime

def main():
    """メイン処理"""
    print("🚀 最適化されたAIコードチェックを開始します...")
    
    # 使用量制限チェック
    if not check_usage_limit():
        exit(0)
    
    # チェックが必要かどうかを判定
    if not should_run_ai_check():
        exit(0)
    
    # チェックレベルを決定
    check_level = get_check_level()
    if check_level == 'skip':
        print("⏭️  設定によりAIチェックをスキップします")
        exit(0)
    
    # コード差分を取得
    diff = get_code_diff()
    file_types = get_changed_file_types()
    commit_message = os.environ.get('CI_COMMIT_MESSAGE', '')
    
    # レベルに応じたプロンプトを生成
    if check_level == 'basic':
        prompt = get_basic_prompt(diff, file_types, commit_message)
    elif check_level == 'security':
        prompt = get_security_prompt(diff, file_types, commit_message)
    else:
        prompt = get_optimized_prompt(diff, file_types, commit_message)
    
    # AIチェックを実行
    result = check_code_quality(prompt)
    
    if not result:
        print("💥 コード品質チェックが失敗しました。CIを失敗させます。")
        exit(1)
    
    print("🎉 コード品質チェックが正常に完了しました。")

if __name__ == "__main__":
    main()
```

このように、プロンプトの最適化とCI実行制御の両方を組み合わせることで、効率的で実用的なAIコードレビューシステムを構築できます。

何かご質問や追加の機能が必要でしたら、お聞かせください！​​​​​​​​​​​​​​​​
