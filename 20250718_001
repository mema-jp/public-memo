# GitHub Actions × Claude Code 自動開発環境構築ガイド

## 概要

このガイドでは、GitHub ActionsとClaude Code CLIを連携させて、要件定義から実装まで自動化する開発環境の構築方法を説明します。

### 機能
- 📋 要件の自動分析と検証
- 🤖 Spring Boot プロジェクトの自動生成
- 🏗️ データベーススキーマの自動設計
- 🧪 テスト環境での自動検証
- 📊 コード品質の自動チェック

## プロジェクト構成

```
your-repo/
├── .github/
│   └── workflows/
│       ├── analyze-requirements.yml      # 要件分析
│       ├── auto-development.yml          # 自動開発
│       └── code-quality-check.yml        # 品質チェック
├── requirements/
│   ├── implemented/                      # 実装済み要件
│   │   └── .gitkeep                      # 空ディレクトリ保持用
│   ├── pending/                          # 未実装要件
│   │   └── .gitkeep                      # 空ディレクトリ保持用
│   └── templates/
│       └── requirement-template.md       # 要件テンプレート
├── standards/
│   ├── development-standards.md          # 開発標準
│   └── project-structure.md              # プロジェクト構造
├── main-project/                         # 統合プロジェクト
│   ├── src/main/java/
│   ├── src/main/resources/
│   ├── src/test/java/
│   ├── pom.xml
│   └── README.md
└── README.md
```

## 事前準備

### 1. GitHub Secrets の設定

リポジトリの `Settings > Secrets and variables > Actions` で以下を設定：

```
CLAUDE_CODE_OAUTH_TOKEN: your-claude-oauth-token
```

### 2. GitHub Actions 権限設定

リポジトリの `Settings > Actions > General` で以下を設定：

1. **Workflow permissions** セクションで：
   - 「Read and write permissions」を選択
   - 「Allow GitHub Actions to create and approve pull requests」にチェック

2. **Actions permissions** セクションで：
   - 「Allow all actions and reusable workflows」を選択

### 3. 代替案：Personal Access Token の使用

自動PR作成がうまくいかない場合、Personal Access Tokenを使用：

1. GitHub で `Settings > Developer settings > Personal access tokens > Tokens (classic)` に移動
2. 新しいトークンを生成し、以下の権限を付与：
   - `repo` (Full control of private repositories)
   - `workflow` (Update GitHub Action workflows)
3. GitHub Secrets に `GITHUB_PAT` として追加

## GitHub Actions ワークフロー

### 1. 要件分析ワークフロー (.github/workflows/analyze-requirements.yml)

```yaml
name: Analyze Requirements

on:
  pull_request:
    paths:
      - 'requirements/pending/**'
    types: [opened, synchronize]

jobs:
  analyze-requirements:
    runs-on: ubuntu-latest
    
    steps:
    - name: コードをチェックアウト
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Node.js セットアップ
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Claude Code インストール
      run: |
        npm install -g @anthropic-ai/claude-code
        claude --version
    
    - name: Claude Code 認証設定
      env:
        CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
      run: |
        claude auth
    
    - name: 要件分析実行
      env:
        CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
      run: |
        claude -p "
        以下の要件を分析してください：

        ## 新しい要件
        $(find requirements/pending/ -name "*.md" -type f -exec cat {} \; 2>/dev/null || echo '新しい要件ファイルが見つかりません')

        ## 既存の実装済み要件
        $(find requirements/implemented/ -name "*.md" -type f | head -5 | xargs cat 2>/dev/null || echo '既存の要件ファイルが見つかりません')

        ## 開発標準
        $(cat standards/development-standards.md 2>/dev/null || echo '開発標準ファイルが見つかりません')

        上記の情報に基づいて、要件の完全性、妥当性、技術的実現可能性を分析し、
        詳細な分析結果を analysis-report.md ファイルに出力してください。
        "
    
    - name: 分析レポートをアップロード
      uses: actions/upload-artifact@v4
      with:
        name: requirements-analysis
        path: analysis-report.md
    
    - name: PR にコメント
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          try {
            const analysis = fs.readFileSync('analysis-report.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 📋 要件分析レポート\n\n${analysis}`
            });
          } catch (error) {
            console.log('Analysis report not found, skipping comment');
          }
```

### 2. 自動開発ワークフロー (.github/workflows/auto-development.yml)

```yaml
name: Auto Development

on:
  push:
    paths:
      - 'requirements/pending/**'
    branches:
      - main
      - develop
  workflow_run:
    workflows: ["Analyze Requirements"]
    types:
      - completed
    branches:
      - main
      - develop
  workflow_dispatch:
    inputs:
      force_run:
        description: '強制実行'
        required: false
        default: 'false'
        type: boolean

jobs:
  auto-develop:
    runs-on: ubuntu-latest
    # workflow_runの場合、成功時のみ実行
    if: ${{ github.event_name != 'workflow_run' || github.event.workflow_run.conclusion == 'success' }}
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: rootpass
          MYSQL_DATABASE: testdb
          MYSQL_USER: testuser
          MYSQL_PASSWORD: testpass
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    
    steps:
    - name: コードをチェックアウト
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_PAT || secrets.GITHUB_TOKEN }}
    
    - name: Java セットアップ
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Node.js セットアップ
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Claude Code インストール
      run: |
        npm install -g @anthropic-ai/claude-code
        claude --version
    
    - name: Claude Code 認証設定
      env:
        CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
      run: |
        claude auth
    
    - name: MySQL 待機
      run: |
        until mysqladmin ping -h 127.0.0.1 -P 3306 -u testuser -ptestpass --silent; do
          echo 'MySQL の起動を待機中...'
          sleep 5
        done
    
    - name: 変更された要件を特定
      id: requirements
      run: |
        echo "イベントタイプ: ${{ github.event_name }}"
        echo "前のコミット: ${{ github.event.before }}"
        echo "現在のコミット: ${{ github.sha }}"
        
        # 手動実行の場合は強制的に実行
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          PENDING_FILES=$(find requirements/pending/ -name "*.md" -type f 2>/dev/null | tr '\n' ' ')
          if [ -n "$PENDING_FILES" ]; then
            echo "手動実行: 未処理の要件ファイルを検出"
            echo "changed_files=${PENDING_FILES}" >> $GITHUB_OUTPUT
            echo "has_new_requirements=true" >> $GITHUB_OUTPUT
            echo "project_name=main-project" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "手動実行: 未処理の要件ファイルが見つかりません"
            echo "has_new_requirements=false" >> $GITHUB_OUTPUT
            exit 0
          fi
        fi
        
        # PRマージの場合とpushの場合で処理を分ける
        if [ "${{ github.event_name }}" = "workflow_run" ]; then
          # workflow_runの場合、最近のコミットから要件ファイルを検索
          CHANGED_FILES=$(git log --name-only --pretty=format: -1 | grep "requirements/pending/" | tr '\n' ' ' || true)
        else
          # 通常のpushの場合
          if [ "${{ github.event.before }}" = "0000000000000000000000000000000000000000" ]; then
            # 新しいブランチの場合、最新コミットを確認
            CHANGED_FILES=$(git diff-tree --no-commit-id --name-only -r ${{ github.sha }} | grep "requirements/pending/" | tr '\n' ' ' || true)
          else
            # 既存ブランチの場合、差分を確認
            CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep "requirements/pending/" | tr '\n' ' ' || true)
          fi
        fi
        
        # requirements/pending/内にファイルがあるかも確認
        if [ -z "$CHANGED_FILES" ]; then
          PENDING_FILES=$(find requirements/pending/ -name "*.md" -type f 2>/dev/null | tr '\n' ' ' || true)
          if [ -n "$PENDING_FILES" ]; then
            echo "変更されたファイルは検出されませんでしたが、pending要件が存在します"
            CHANGED_FILES="$PENDING_FILES"
          fi
        fi
        
        echo "変更されたファイル: $CHANGED_FILES"
        echo "changed_files=${CHANGED_FILES}" >> $GITHUB_OUTPUT
        
        if [ -n "$CHANGED_FILES" ]; then
          echo "has_new_requirements=true" >> $GITHUB_OUTPUT
          # 統合プロジェクト名を固定
          echo "project_name=main-project" >> $GITHUB_OUTPUT
        else
          echo "has_new_requirements=false" >> $GITHUB_OUTPUT
        fi
    
    - name: 開発ブランチ作成
      if: steps.requirements.outputs.has_new_requirements == 'true'
      run: |
        TIMESTAMP=$(date +%Y%m%d-%H%M%S)
        BRANCH_NAME="feature/requirement-${TIMESTAMP}"
        git checkout -b $BRANCH_NAME
        echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
    
    - name: 自動開発実行
      if: steps.requirements.outputs.has_new_requirements == 'true'
      env:
        CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
      run: |
        echo "=== 自動開発開始 ==="
        echo "統合プロジェクト: ${{ steps.requirements.outputs.project_name }}"
        echo "新しい要件: ${{ steps.requirements.outputs.changed_files }}"
        
        # 必要なディレクトリを事前作成
        mkdir -p requirements/implemented
        mkdir -p "${{ steps.requirements.outputs.project_name }}"
        
        # Claude Code の権限設定と実行
        cd "${{ steps.requirements.outputs.project_name }}"
        
        # Claude Code をバイパス権限で実行
        echo "Claude Code を権限付きで実行中..."
        claude --dangerously-skip-permissions -p "
        以下の新しい要件を既存のSpring Bootプロジェクトに追加実装してください：

        ## 新しい要件
        $(cat ../${{ steps.requirements.outputs.changed_files }} 2>/dev/null || echo '要件ファイルの読み込みに失敗しました')

        ## 既存の実装済み要件（参考）
        $(find ../requirements/implemented/ -name "*.md" -type f 2>/dev/null | head -3 | xargs cat 2>/dev/null || echo '既存要件なし（初回実装）')

        ## 開発標準
        $(cat ../standards/development-standards.md 2>/dev/null || echo '開発標準ファイルの読み込みに失敗しました')

        ## プロジェクト情報
        - プロジェクト名: ${{ steps.requirements.outputs.project_name }}
        - 現在のディレクトリ: ${{ steps.requirements.outputs.project_name }}（統合プロジェクト）
        - データベース: MySQL (URL: jdbc:mysql://localhost:3306/testdb, user: testuser, pass: testpass)

        ## 実行方針
        1. 現在のディレクトリの内容を確認し、既存プロジェクトか新規プロジェクトかを判断
        2. 既存プロジェクトの場合：新機能を統合し、既存コードとの整合性を保つ
        3. 新規プロジェクトの場合：完全なSpring Bootプロジェクト構造を作成
        4. 要件に基づいて必要なエンティティ、API、サービス、テストを実装
        5. Maven設定、アプリケーション設定、ドキュメントを更新

        実装完了後、'=== 実装完了 ===' と出力してください。
        " || echo "Claude Code実行中にエラーが発生しました"
        
        # 作業ディレクトリを元に戻す
        cd ..
    
    - name: ビルドとテスト
      if: steps.requirements.outputs.has_new_requirements == 'true'
      run: |
        PROJECT_DIR="${{ steps.requirements.outputs.project_name }}"
        if [ -d "$PROJECT_DIR" ] && [ -f "$PROJECT_DIR/pom.xml" ]; then
          echo "Maven プロジェクトをビルド中..."
          cd "$PROJECT_DIR"
          mvn clean compile test
          cd ..
        else
          echo "pom.xml が見つかりません。ビルドをスキップします。"
        fi
    
    - name: データベース検証
      if: steps.requirements.outputs.has_new_requirements == 'true'
      run: |
        PROJECT_DIR="${{ steps.requirements.outputs.project_name }}"
        if [ -d "$PROJECT_DIR" ] && [ -f "$PROJECT_DIR/pom.xml" ]; then
          echo "データベース接続を検証中..."
          cd "$PROJECT_DIR"
          export SPRING_PROFILES_ACTIVE=test
          export SPRING_DATASOURCE_URL=jdbc:mysql://localhost:3306/testdb
          export SPRING_DATASOURCE_USERNAME=testuser
          export SPRING_DATASOURCE_PASSWORD=testpass
          timeout 30s mvn spring-boot:run || true
          cd ..
          echo "データベースのテーブル一覧："
          mysql -h 127.0.0.1 -P 3306 -u testuser -ptestpass testdb -e "SHOW TABLES;" || true
        else
          echo "Spring Boot プロジェクトが見つかりません。データベース検証をスキップします。"
        fi
    
    - name: 実装済み要件の移動
      if: steps.requirements.outputs.has_new_requirements == 'true'
      run: |
        # implemented ディレクトリが存在しない場合は作成
        mkdir -p requirements/implemented
        
        # 変更されたファイルを移動
        if [ -n "${{ steps.requirements.outputs.changed_files }}" ]; then
          echo "移動対象ファイル: ${{ steps.requirements.outputs.changed_files }}"
          for file in ${{ steps.requirements.outputs.changed_files }}; do
            if [ -f "$file" ]; then
              filename=$(basename "$file")
              timestamp=$(date +%Y%m%d-%H%M%S)
              destination="requirements/implemented/${timestamp}-$filename"
              mv "$file" "$destination"
              echo "要件ファイルを移動: $file → $destination"
            else
              echo "ファイルが見つかりません: $file"
            fi
          done
        else
          echo "移動対象のファイルがありません"
        fi
    
    - name: 変更をコミット
      if: steps.requirements.outputs.has_new_requirements == 'true'
      run: |
        echo "=== Git 状態確認 ==="
        git status
        
        # Git 設定
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # 全ての変更をステージング
        git add .
        
        # 要件ファイル名を取得（コミットメッセージ用）
        REQUIREMENT_NAMES=$(echo "${{ steps.requirements.outputs.changed_files }}" | sed 's/requirements\/pending\///g' | sed 's/\.md//g' | tr ' ' ',')
        
        # コミット実行
        git commit -m "✨ 新機能実装: ${REQUIREMENT_NAMES}

        📋 実装した要件: ${{ steps.requirements.outputs.changed_files }}
        🏗️ 統合プロジェクト: ${{ steps.requirements.outputs.project_name }}
        ⏰ 実装日時: $(date)
        
        Claude Code により既存プロジェクトに新機能を追加実装"
        
        echo "=== プッシュ実行 ==="
        git push origin $BRANCH_NAME
    
    - name: プルリクエスト作成
      if: steps.requirements.outputs.has_new_requirements == 'true'
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_PAT || secrets.GITHUB_TOKEN }}
        script: |
          try {
            const result = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `✨ 新機能実装: ${process.env.REQUIREMENT_NAMES || '${{ steps.requirements.outputs.project_name }}'}`,
              head: process.env.BRANCH_NAME,
              base: 'main',
              body: `## ✨ 新機能実装

## 📁 プロジェクト情報
- **統合プロジェクト**: ${{ steps.requirements.outputs.project_name }}
- **プロジェクトパス**: \`${{ steps.requirements.outputs.project_name }}/\`
- **技術スタック**: Java 17 + Spring Boot 3.x + MySQL 8.0

## 📋 実装した要件
${{ steps.requirements.outputs.changed_files }}

## 🧪 テスト結果
- ✅ コンパイル成功
- ✅ 単体テスト通過
- ✅ データベース接続検証通過
- ✅ 既存機能との統合確認

## 🏗️ 実装内容
- 既存プロジェクトに新機能を追加
- 既存のエンティティ、API、サービスとの整合性を保持
- 新しい要件に基づく機能実装
- 統合テストとデータベーススキーマ更新

## ⚠️ 審査要点
- [ ] 新機能と既存機能の整合性
- [ ] データベース設計の妥当性  
- [ ] APIインターフェースの一貫性
- [ ] テストカバレッジの充足性
- [ ] セキュリティ考慮事項
- [ ] パフォーマンス影響評価

コードレビュー後にマージしてください。`
            });
            console.log('プルリクエストが正常に作成されました:', result.data.html_url);
          } catch (error) {
            console.error('プルリクエスト作成エラー:', error.message);
            console.log('代替として、手動でプルリクエストを作成してください:');
            console.log(`ブランチ: ${process.env.BRANCH_NAME} → main`);
            console.log(`プロジェクト: ${{ steps.requirements.outputs.project_name }}`);
            
            // エラーでもワークフローを失敗させない
            process.exit(0);
          }
```

### 3. コード品質チェックワークフロー (.github/workflows/code-quality-check.yml)

```yaml
name: Code Quality Check

on:
  pull_request:
    types: [opened, synchronize]
    paths:
      - 'implementations/**'

jobs:
  quality-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: コードをチェックアウト
      uses: actions/checkout@v4
    
    - name: Java セットアップ
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Node.js セットアップ
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Claude Code インストール
      run: |
        npm install -g @anthropic-ai/claude-code
        claude --version
    
    - name: Claude Code 認証設定
      env:
        CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
      run: |
        claude auth
    
    - name: 実装プロジェクト検索
      id: projects
      run: |
        # 統合プロジェクトのパスを設定
        if [ -d "main-project" ]; then
          PROJECTS="main-project"
          echo "projects=${PROJECTS}" >> $GITHUB_OUTPUT
          echo "検出されたプロジェクト: ${PROJECTS}"
        else
          echo "projects=" >> $GITHUB_OUTPUT
          echo "統合プロジェクトが見つかりませんでした"
        fi
    
    - name: プロジェクトのビルドとテスト
      if: steps.projects.outputs.projects != ''
      run: |
        PROJECT_DIR="${{ steps.projects.outputs.projects }}"
        if [ -f "$PROJECT_DIR/pom.xml" ]; then
          echo "ビルド中: $PROJECT_DIR"
          cd "$PROJECT_DIR"
          mvn clean compile test
          cd ..
        else
          echo "pom.xml が見つかりません: $PROJECT_DIR"
        fi
    
    - name: コード品質分析
      if: steps.projects.outputs.projects != ''
      env:
        CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
      run: |
        claude -p "
        以下のプロジェクトのコード品質を分析してください：

        ## 対象プロジェクト
        ${{ steps.projects.outputs.projects }}/ ディレクトリ内のプロジェクト

        ## 開発標準
        $(cat standards/development-standards.md 2>/dev/null || echo '開発標準ファイルが見つかりません')

        ## 分析内容
        上記の開発標準に基づいて、統合プロジェクトのコード品質、セキュリティ、パフォーマンス、テスト品質、アーキテクチャを総合的に分析し、
        具体的な改善提案を含めた詳細なレポートを quality-report.md ファイルに出力してください。
        "
    
    - name: レポートをアップロード
      if: steps.projects.outputs.projects != ''
      uses: actions/upload-artifact@v4
      with:
        name: quality-reports
        path: quality-report.md
    
    - name: PR にコメント
      if: github.event_name == 'pull_request' && steps.projects.outputs.projects != ''
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          try {
            const report = fs.readFileSync('quality-report.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 📊 コード品質チェックレポート\n\n${report}\n\n📎 詳細レポートは Artifacts の quality-reports をご確認ください。`
            });
          } catch (error) {
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 📊 コード品質チェック\n\n品質レポートの生成中にエラーが発生しました。\nログを確認してください。`
            });
          }
```

## 開発標準ドキュメント

### 1. 開発標準 (standards/development-standards.md)

```markdown
# Spring Boot 開発標準

## 技術スタック
- **Java**: 17
- **フレームワーク**: Spring Boot 3.2+
- **データベース**: MySQL 8.0
- **ビルドツール**: Maven
- **テスト**: JUnit 5 + Mockito

## プロジェクト構造標準
```
implementations/{project-name}/
├── src/main/java/com/company/{domain}/
│   ├── controller/     # REST コントローラー
│   ├── service/        # ビジネスロジック層
│   ├── repository/     # データアクセス層
│   ├── entity/         # JPA エンティティ
│   ├── dto/           # データ転送オブジェクト
│   ├── config/        # 設定クラス
│   └── exception/     # 例外処理
├── src/main/resources/
│   ├── application.yml
│   └── application-test.yml
├── src/test/java/
├── pom.xml
└── README.md
```

## API 設計標準
- **バージョン管理**: `/api/v1/`
- **ヘルスチェック**: `/actuator/health`
- **CRUD 操作**:
  - GET `/api/v1/{resource}` - 一覧取得
  - GET `/api/v1/{resource}/{id}` - 単体取得
  - POST `/api/v1/{resource}` - 作成
  - PUT `/api/v1/{resource}/{id}` - 更新
  - DELETE `/api/v1/{resource}/{id}` - 削除

## コーディング規約
- Spring Boot Starter 依存関係を使用
- レイヤードアーキテクチャの実装
- JPA/Hibernate を使用したデータアクセス
- 統一例外処理
- 入力検証とデータバリデーション
- 単体テストカバレッジ > 80%
```

### 2. プロジェクト構造テンプレート (standards/project-structure.md)

```markdown
# Spring Boot プロジェクト構造テンプレート

## Maven 依存関係テンプレート
```xml
<dependencies>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-data-jpa</artifactId>
    </dependency>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-actuator</artifactId>
    </dependency>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-validation</artifactId>
    </dependency>
    <dependency>
        <groupId>mysql</groupId>
        <artifactId>mysql-connector-java</artifactId>
        <scope>runtime</scope>
    </dependency>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-test</artifactId>
        <scope>test</scope>
    </dependency>
</dependencies>
```

## 設定ファイルテンプレート
```yaml
spring:
  application:
    name: ${project.name}
  datasource:
    url: ${database.url}
    username: ${database.username}
    password: ${database.password}
    driver-class-name: com.mysql.cj.jdbc.Driver
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        format_sql: true

server:
  port: 8080

management:
  endpoints:
    web:
      exposure:
        include: health,info
  endpoint:
    health:
      show-details: always
```
```

### 3. 要件テンプレート (requirements/templates/requirement-template.md)

```markdown
# 要件タイトル

## 要件説明
[要件内容とビジネス背景の詳細説明]

## 機能要件
- [ ] コア機能1
- [ ] コア機能2
- [ ] コア機能3

## API 設計要件
- バージョン: v1
- パス接頭辞: /api/v1/
- ヘルスチェックエンドポイントを含む
- 基本的な CRUD 操作を実装

## データベース要件
- MySQL 8.0 を使用
- データベース命名規約に従う
- 必要なインデックス設計を含む

## 受け入れ基準
- [ ] 機能が正常に動作する
- [ ] API インターフェースが標準に準拠
- [ ] 単体テストカバレッジ > 80%
- [ ] コード品質チェックが通過

## 優先度
- [ ] 高 - [ ] 中 - [ ] 低

## 見積工期
[日数]

## 依存要件
[関連要件IDまたは無し]
```

## 使用方法

### ブランチ戦略とトリガー条件

#### **トリガータイミング概要**：
1. **要件分析**：`requirements/pending/` を変更する PR 時にトリガー
2. **自動開発**：`main` または `develop` ブランチにマージ時にトリガー  
3. **品質チェック**：`implementations/` への PR 時にトリガー

#### **推奨ワークフロー**：
```bash
# 1. 要件ブランチ作成
git checkout -b feature/user-management
echo "要件内容" > requirements/pending/user-management.md
git add . && git commit -m "ユーザー管理要件を追加"
git push origin feature/user-management

# 2. main ブランチへの PR 作成
# → 要件分析トリガー ✅

# 3. 要件分析レポート確認後、PR をマージ
# → 自動開発トリガー ✅

# 4. 自動開発完了後、実装コードの PR が自動作成される
# → コード品質チェックトリガー ✅
```

### 初期設定
1. プロジェクトディレクトリ構造を作成:
```bash
# 必要なディレクトリを作成
mkdir -p .github/workflows
mkdir -p requirements/{implemented,pending,templates}
mkdir -p standards
mkdir -p main-project

# 空ディレクトリ保持用ファイルを作成
touch requirements/implemented/.gitkeep
touch requirements/pending/.gitkeep
```

2. GitHub Secrets に `CLAUDE_CODE_OAUTH_TOKEN` を追加
3. 開発標準ドキュメントをコミット

### ローカルでの Claude Code 使用

```bash
# 環境変数設定
export CLAUDE_CODE_OAUTH_TOKEN=your-token

# Claude Code 起動
cd your-project
claude

# 非対話モードでの使用
claude -p "requirements/pending/ の要件を分析してください"

# ファイル指定での作業
claude -p "@requirements/pending/user-management.md この要件を実装してください"
```

## 実装例：ユーザー管理システム

### 要件ファイル例 (requirements/pending/user-management.md)
```markdown
# ユーザー管理システム

## 要件説明
基本的なユーザー管理機能を実装し、ユーザー登録、ログイン、情報管理などを含む

## 機能要件
- [ ] ユーザー登録とログイン
- [ ] ユーザー情報の CRUD 操作
- [ ] ユーザーステータス管理

## API 設計要件
- バージョン: v1
- パス: /api/v1/users
- ヘルスチェック: /actuator/health
- CRUD 操作:
  - GET /api/v1/users - ユーザー一覧取得
  - GET /api/v1/users/{id} - ユーザー詳細取得
  - POST /api/v1/users - ユーザー作成
  - PUT /api/v1/users/{id} - ユーザー更新
  - DELETE /api/v1/users/{id} - ユーザー削除

## データベース要件
- ユーザーテーブル含む項目：id, username, email, password, status, created_at, updated_at
- username と email のユニーク制約
- 適切なインデックス設計

## 受け入れ基準
- [ ] 全ての API エンドポイントが正常動作
- [ ] データバリデーションと例外処理
- [ ] 単体テストカバレッジ > 80%
- [ ] API ドキュメント生成

## 優先度
- [x] 高

## 見積工期
3日
```

### 生成される予定のプロジェクト構造
```
main-project/
├── src/main/java/com/company/app/
│   ├── Application.java
│   ├── controller/
│   │   ├── UserController.java
│   │   └── HealthController.java
│   ├── service/
│   │   └── UserService.java
│   ├── repository/
│   │   └── UserRepository.java
│   ├── entity/
│   │   └── User.java
│   └── dto/
│       └── UserDto.java
├── src/main/resources/
│   ├── application.yml
│   └── application-test.yml
├── src/test/java/
├── pom.xml
└── README.md
```

### 生成される予定の API エンドポイント
- `GET /actuator/health` - ヘルスチェック
- `GET /api/v1/users` - ユーザー一覧
- `GET /api/v1/users/{id}` - ユーザー詳細
- `POST /api/v1/users` - ユーザー作成
- `PUT /api/v1/users/{id}` - ユーザー更新
- `DELETE /api/v1/users/{id}` - ユーザー削除

## トラブルシューティング

## トラブルシューティング

### 問題1: Claude Code権限エラー

**エラーメッセージ**: `プロジェクトの作成には権限が必要です。Bash権限とWrite権限をお願いします。`

**解決策**:

#### A. 権限バイパスオプションの使用（推奨）
ワークフローで `--dangerously-skip-permissions` フラグを使用：
```bash
claude --dangerously-skip-permissions -p "..."
```

#### B. 事前権限設定
Claude Code セッション開始時に権限を許可：
```bash
# 対話的に権限を許可
echo "y" | claude -p "権限を要求するプロンプト"
```

#### C. 代替認証方法
環境変数で権限設定を行う：
```bash
export CLAUDE_CODE_SKIP_PERMISSIONS=true
claude -p "..."
```

### 問題2: ディレクトリ作成エラー

**エラーメッセージ**: `find: '../requirements/implemented/': No such file or directory`

**解決策**:
```bash
# 必要なディレクトリを事前作成
mkdir -p requirements/implemented
mkdir -p requirements/pending  
mkdir -p main-project
```

### 問題3: Auto Development がトリガーされない

**原因**: 複数の可能性があります

**解決策**:

#### A. 手動トリガーでテスト
1. GitHub リポジトリの「Actions」タブに移動
2. 「Auto Development」ワークフローを選択
3. 「Run workflow」ボタンをクリック
4. 「強制実行」を選択して実行

#### B. 要件ファイルの確認と準備
```bash
# 必要なディレクトリを作成
mkdir -p requirements/{implemented,pending}
mkdir -p implementations

# requirements/pending/ ディレクトリに .md ファイルがあることを確認
ls -la requirements/pending/

# テスト用の要件ファイルを作成
echo "# テスト要件

## 要件説明
テスト用の要件です

## 機能要件
- [ ] テスト機能1
- [ ] テスト機能2

## API 設計要件
- バージョン: v1
- パス接頭辞: /api/v1/
- 基本的な CRUD 操作を実装

## 受け入れ基準
- [ ] 機能が正常に動作する
- [ ] 単体テストカバレッジ > 80%

## 優先度
- [x] 高

## 見積工期
1日" > requirements/pending/test-requirement.md

# ファイルをコミット
git add requirements/pending/test-requirement.md
git commit -m "Add test requirement"
git push origin main
```

#### C. ワークフローファイルの確認
```yaml
# .github/workflows/auto-development.yml が正しい場所にあることを確認
# ファイル名とパスが正確であることを確認
```

#### D. ブランチ設定の確認
- main または develop ブランチにプッシュしているか確認
- ブランチ保護ルールが影響していないか確認

#### E. ログの確認方法
1. GitHub Actions の実行ログを確認
2. 「変更された要件を特定」ステップの出力を確認
3. エラーメッセージがないかチェック

### 問題2: workflow_run トリガーが動作しない

**原因**: ワークフロー名の不一致やタイミング問題

**解決策**:
```yaml
# analyze-requirements.yml のワークフロー名が正確に一致しているか確認
name: Analyze Requirements  # この名前が正確に一致する必要がある
```

### 問題3: プルリクエスト作成権限エラー

**エラーメッセージ**: `GitHub Actions is not permitted to create or approve pull requests`

**解決策**:

#### A. リポジトリ設定の変更（推奨）
1. GitHub リポジトリの「Settings」に移動
2. 左サイドバーの「Actions」→「General」をクリック
3. 「Workflow permissions」セクションで：
   - 「Read and write permissions」を選択
   - 「Allow GitHub Actions to create and approve pull requests」にチェック
4. 「Save」をクリック

#### B. Personal Access Token の使用
上記設定でも解決しない場合：

1. GitHub で個人設定の「Settings」→「Developer settings」→「Personal access tokens」→「Tokens (classic)」に移動
2. 「Generate new token (classic)」をクリック
3. 必要な権限を選択：
   - `repo` (リポジトリへのフルアクセス)
   - `workflow` (GitHub Actionsワークフローの更新)
4. トークンを生成してコピー
5. リポジトリの「Settings」→「Secrets and variables」→「Actions」で `GITHUB_PAT` として追加

#### C. 代替案：通知のみ
プルリクエスト作成の代わりに、Issue コメントまたは通知を使用：

```yaml
- name: 実装完了通知
  if: steps.requirements.outputs.has_new_requirements == 'true'
  run: |
    echo "## 🎉 実装完了通知"
    echo "ブランチ: ${BRANCH_NAME}"
    echo "プロジェクト: ${{ steps.requirements.outputs.project_name }}"
    echo "手動でプルリクエストを作成してください:"
    echo "https://github.com/${{ github.repository }}/compare/main...${BRANCH_NAME}"
```

### 問題4: デバッグ用の簡単なワークフロー

問題を特定するために、以下の簡易版を試してください：

```yaml
# .github/workflows/debug-auto-development.yml
name: Debug Auto Development

on:
  workflow_dispatch:
  push:
    branches: [main, develop]

jobs:
  debug:
    runs-on: ubuntu-latest
    steps:
    - name: チェックアウト
      uses: actions/checkout@v4
    
    - name: ディレクトリ構造確認
      run: |
        echo "=== ディレクトリ構造 ==="
        find . -type f -name "*.md" | head -20
        echo "=== requirements/pending/ の内容 ==="
        ls -la requirements/pending/ || echo "ディレクトリが存在しません"
    
    - name: 環境変数確認
      run: |
        echo "GitHub Event: ${{ github.event_name }}"
        echo "Branch: ${{ github.ref }}"
        echo "Before: ${{ github.event.before }}"
        echo "SHA: ${{ github.sha }}"
```

### 問題5: Claude Code認証エラー
**解決策**: 
```bash
# OAuth Token の確認
echo $CLAUDE_CODE_OAUTH_TOKEN
# 再認証
claude auth
```

### 問題2: 自動開発がトリガーされない
**解決策**:
1. 手動トリガーを使用: GitHub Actions画面から workflow_dispatch を実行
2. ログを確認してファイル検出ロジックをデバッグ

### 問題3: プロジェクト生成の失敗
**解決策**:
1. Claude Code のプロンプトをより具体的に修正
2. 段階的な実装に分割
3. エラーログの確認

## まとめ

この環境により、要件定義から実装、テスト、デプロイまでの開発プロセスが大幅に自動化され、開発効率の向上とコード品質の安定化を実現できます。

### 主な利点
- 🚀 **開発速度向上**: Claude Code による自動実装
- 📊 **品質保証**: 自動テスト・品質チェック
- 🔄 **一貫性確保**: 標準化されたコード生成
- 👥 **チーム連携**: PR ベースのレビュープロセス
- 🛠️ **シンプル**: 複雑な設定ファイル不要
