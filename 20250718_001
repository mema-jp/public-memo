# GitHub Actions × Claude Code 自動開発環境構築ガイド

## 概要

このガイドでは、GitHub ActionsとClaude Code CLIを連携させて、要件定義から実装まで自動化する開発環境の構築方法を説明します。

### 機能
- 📋 要件の自動分析と検証
- 🤖 Spring Boot プロジェクトの自動生成
- 🏗️ データベーススキーマの自動設計
- 🧪 テスト環境での自動検証
- 📊 コード品質の自動チェック

## プロジェクト構成

```
your-repo/
├── .github/
│   └── workflows/
│       ├── analyze-requirements.yml      # 要件分析
│       ├── auto-development.yml          # 自動開発
│       └── code-quality-check.yml        # 品質チェック
├── requirements/
│   ├── implemented/                      # 実装済み要件
│   ├── pending/                          # 未実装要件
│   └── templates/
│       └── requirement-template.md       # 要件テンプレート
├── standards/
│   ├── development-standards.md          # 開発標準
│   └── project-structure.md              # プロジェクト構造
├── implementations/                      # 実装プロジェクト
│   └── .gitkeep
└── README.md
```

## 事前準備

### 1. GitHub Secrets の設定

リポジトリの `Settings > Secrets and variables > Actions` で以下を設定：

```
CLAUDE_CODE_OAUTH_TOKEN: your-claude-oauth-token
```

## GitHub Actions ワークフロー

### 1. 要件分析ワークフロー (.github/workflows/analyze-requirements.yml)

```yaml
name: Analyze Requirements

on:
  pull_request:
    paths:
      - 'requirements/pending/**'
    types: [opened, synchronize]

jobs:
  analyze-requirements:
    runs-on: ubuntu-latest
    
    steps:
    - name: コードをチェックアウト
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Node.js セットアップ
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Claude Code インストール
      run: |
        npm install -g @anthropic-ai/claude-code
        claude --version
    
    - name: Claude Code 認証設定
      env:
        CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
      run: |
        claude auth
    
    - name: 要件分析実行
      env:
        CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
      run: |
        claude -p "
        要件分析を実行してください：

        1. requirements/pending/ ディレクトリの要件ファイルを確認
        2. standards/ ディレクトリの開発標準と照合
        3. 以下の観点で分析：
           - 要件の完全性と妥当性
           - 技術的実現可能性
           - 既存実装との整合性
           - セキュリティとパフォーマンスへの影響

        4. 分析結果を analysis-report.md に出力

        開始してください。
        "
    
    - name: 分析レポートをアップロード
      uses: actions/upload-artifact@v4
      with:
        name: requirements-analysis
        path: analysis-report.md
    
    - name: PR にコメント
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          try {
            const analysis = fs.readFileSync('analysis-report.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 📋 要件分析レポート\n\n${analysis}`
            });
          } catch (error) {
            console.log('Analysis report not found, skipping comment');
          }
```

### 2. 自動開発ワークフロー (.github/workflows/auto-development.yml)

```yaml
name: Auto Development

on:
  push:
    paths:
      - 'requirements/pending/**'
    branches:
      - main
      - develop
  workflow_run:
    workflows: ["Analyze Requirements"]
    types:
      - completed
    branches:
      - main
      - develop
  workflow_dispatch:
    inputs:
      force_run:
        description: '強制実行'
        required: false
        default: 'false'

jobs:
  auto-develop:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: rootpass
          MYSQL_DATABASE: testdb
          MYSQL_USER: testuser
          MYSQL_PASSWORD: testpass
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    
    steps:
    - name: コードをチェックアウト
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Java セットアップ
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Node.js セットアップ
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Claude Code インストール
      run: |
        npm install -g @anthropic-ai/claude-code
        claude --version
    
    - name: Claude Code 認証設定
      env:
        CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
      run: |
        claude auth
    
    - name: MySQL 待機
      run: |
        until mysqladmin ping -h 127.0.0.1 -P 3306 -u testuser -ptestpass --silent; do
          echo 'MySQL の起動を待機中...'
          sleep 5
        done
    
    - name: 変更された要件を特定
      id: requirements
      run: |
        # PRマージの場合とpushの場合で処理を分ける
        if [ "${{ github.event_name }}" = "workflow_run" ]; then
          # workflow_runの場合、最近のコミットから要件ファイルを検索
          CHANGED_FILES=$(git log --name-only --pretty=format: -1 | grep "requirements/pending/" | tr '\n' ' ')
        else
          # 通常のpushの場合
          if [ "${{ github.event.before }}" = "0000000000000000000000000000000000000000" ]; then
            # 新しいブランチの場合、最新コミットを確認
            CHANGED_FILES=$(git diff-tree --no-commit-id --name-only -r ${{ github.sha }} | grep "requirements/pending/" | tr '\n' ' ')
          else
            # 既存ブランチの場合、差分を確認
            CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep "requirements/pending/" | tr '\n' ' ')
          fi
        fi
        
        # requirements/pending/内にファイルがあるかも確認
        if [ -z "$CHANGED_FILES" ]; then
          PENDING_FILES=$(find requirements/pending/ -name "*.md" -type f 2>/dev/null | tr '\n' ' ')
          if [ -n "$PENDING_FILES" ]; then
            CHANGED_FILES="$PENDING_FILES"
          fi
        fi
        
        echo "変更されたファイル: $CHANGED_FILES"
        echo "changed_files=${CHANGED_FILES}" >> $GITHUB_OUTPUT
        
        if [ -n "$CHANGED_FILES" ]; then
          echo "has_new_requirements=true" >> $GITHUB_OUTPUT
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          PROJECT_NAME="requirement-impl-${TIMESTAMP}"
          echo "project_name=${PROJECT_NAME}" >> $GITHUB_OUTPUT
        else
          echo "has_new_requirements=false" >> $GITHUB_OUTPUT
        fi
    
    - name: 開発ブランチ作成
      if: steps.requirements.outputs.has_new_requirements == 'true'
      run: |
        BRANCH_NAME="auto-dev/${{ steps.requirements.outputs.project_name }}"
        git checkout -b $BRANCH_NAME
        echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
    
    - name: 自動開発実行
      if: steps.requirements.outputs.has_new_requirements == 'true'
      env:
        CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
      run: |
        claude -p "
        自動開発を実行してください：

        プロジェクト名: ${{ steps.requirements.outputs.project_name }}
        変更された要件ファイル: ${{ steps.requirements.outputs.changed_files }}

        タスク:
        1. implementations/${{ steps.requirements.outputs.project_name }}/ ディレクトリを作成
        2. standards/development-standards.md に基づいてSpring Bootプロジェクト構造を生成
        3. 要件に基づいて以下を実装：
           - エンティティクラス (JPA アノテーション付き)
           - リポジトリインターフェース (Spring Data JPA)
           - サービスクラス (ビジネスロジック)
           - RESTコントローラー (API エンドポイント)
           - DTOクラス (データ転送オブジェクト)
           - 例外ハンドリング (@ControllerAdvice)
           - 単体テスト (JUnit 5 + Mockito)

        4. 以下の設定ファイルを生成：
           - pom.xml (Spring Boot 3.x + MySQL 8.0 + JPA)
           - application.yml (データベース設定含む)
           - application-test.yml (テスト用設定)
           - Dockerfile
           - README.md (プロジェクト説明)

        5. データベース設定：
           - URL: jdbc:mysql://localhost:3306/testdb
           - ユーザー名: testuser
           - パスワード: testpass

        6. API設計標準：
           - ベースパス: /api/v1/
           - ヘルスチェック: /actuator/health
           - 標準的なCRUD操作

        開始してください。完了したら実装の概要を表示してください。
        "
    
    - name: ビルドとテスト
      if: steps.requirements.outputs.has_new_requirements == 'true'
      run: |
        if [ -d "implementations/${{ steps.requirements.outputs.project_name }}" ]; then
          cd "implementations/${{ steps.requirements.outputs.project_name }}"
          if [ -f "pom.xml" ]; then
            echo "Maven プロジェクトをビルド中..."
            mvn clean compile test
          fi
        fi
    
    - name: データベース検証
      if: steps.requirements.outputs.has_new_requirements == 'true'
      run: |
        if [ -d "implementations/${{ steps.requirements.outputs.project_name }}" ]; then
          cd "implementations/${{ steps.requirements.outputs.project_name }}"
          if [ -f "pom.xml" ]; then
            echo "データベース接続を検証中..."
            export SPRING_PROFILES_ACTIVE=test
            export SPRING_DATASOURCE_URL=jdbc:mysql://localhost:3306/testdb
            export SPRING_DATASOURCE_USERNAME=testuser
            export SPRING_DATASOURCE_PASSWORD=testpass
            timeout 30s mvn spring-boot:run || true
            echo "データベースのテーブル一覧："
            mysql -h 127.0.0.1 -P 3306 -u testuser -ptestpass testdb -e "SHOW TABLES;" || true
          fi
        fi
    
    - name: 実装済み要件の移動
      if: steps.requirements.outputs.has_new_requirements == 'true'
      run: |
        for file in ${{ steps.requirements.outputs.changed_files }}; do
          if [ -f "$file" ]; then
            filename=$(basename "$file")
            timestamp=$(date +%Y%m%d-%H%M%S)
            mv "$file" "requirements/implemented/${timestamp}-$filename"
            echo "要件ファイルを移動: $file → requirements/implemented/${timestamp}-$filename"
          fi
        done
    
    - name: 変更をコミット
      if: steps.requirements.outputs.has_new_requirements == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add .
        git commit -m "🤖 自動実装: ${{ steps.requirements.outputs.project_name }}

        📁 プロジェクト: ${{ steps.requirements.outputs.project_name }}
        📋 処理された要件: ${{ steps.requirements.outputs.changed_files }}
        🏗️ 完全なSpring Bootアプリケーションを生成
        ✅ テストとデータベース検証通過
        📚 ドキュメント生成完了
        
        生成されたファイル:
        - 完全なプロジェクト構造
        - Spring Boot アプリケーションコード
        - 単体・統合テスト
        - API ドキュメント
        - データベーススキーマ
        - デプロイ設定"
        
        git push origin $BRANCH_NAME
    
    - name: プルリクエスト作成
      if: steps.requirements.outputs.has_new_requirements == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.pulls.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `🤖 自動実装: ${{ steps.requirements.outputs.project_name }}`,
            head: process.env.BRANCH_NAME,
            base: 'main',
            body: `## 🚀 自動実装された要件

## 📁 プロジェクト情報
- **プロジェクト名**: ${{ steps.requirements.outputs.project_name }}
- **実装パス**: \`implementations/${{ steps.requirements.outputs.project_name }}/\`
- **技術スタック**: Java 17 + Spring Boot 3.x + MySQL 8.0

## 🧪 テスト結果
- ✅ コンパイル成功
- ✅ 単体テスト通過
- ✅ データベース接続検証通過
- ✅ スキーマ作成成功

## 📂 生成されたファイル
- \`implementations/${{ steps.requirements.outputs.project_name }}/src/\` - 完全なSpring Bootアプリケーションコード
- \`implementations/${{ steps.requirements.outputs.project_name }}/pom.xml\` - Maven設定ファイル
- \`implementations/${{ steps.requirements.outputs.project_name }}/src/main/resources/application.yml\` - アプリケーション設定
- \`implementations/${{ steps.requirements.outputs.project_name }}/Dockerfile\` - Docker設定
- \`implementations/${{ steps.requirements.outputs.project_name }}/README.md\` - プロジェクトドキュメント

## ⚠️ 審査要点
- [ ] コード品質とアーキテクチャ設計
- [ ] データベース設計の妥当性
- [ ] APIインターフェースの規範性
- [ ] テストカバレッジの充足性
- [ ] セキュリティ考慮事項
- [ ] パフォーマンス影響評価

コードレビュー後にマージしてください。`
          });
```

### 3. コード品質チェックワークフロー (.github/workflows/code-quality-check.yml)

```yaml
name: Code Quality Check

on:
  pull_request:
    types: [opened, synchronize]
    paths:
      - 'implementations/**'

jobs:
  quality-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: コードをチェックアウト
      uses: actions/checkout@v4
    
    - name: Java セットアップ
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Node.js セットアップ
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Claude Code インストール
      run: |
        npm install -g @anthropic-ai/claude-code
        claude --version
    
    - name: Claude Code 認証設定
      env:
        CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
      run: |
        claude auth
    
    - name: 実装プロジェクト検索
      id: projects
      run: |
        PROJECTS=$(find implementations/ -maxdepth 1 -type d -name "requirement-impl-*" | tr '\n' ' ')
        echo "projects=${PROJECTS}" >> $GITHUB_OUTPUT
        echo "検出されたプロジェクト: ${PROJECTS}"
    
    - name: プロジェクトのビルドとテスト
      if: steps.projects.outputs.projects != ''
      run: |
        for project_dir in ${{ steps.projects.outputs.projects }}; do
          if [ -f "$project_dir/pom.xml" ]; then
            echo "ビルド中: $project_dir"
            cd "$project_dir"
            mvn clean compile test
            cd - > /dev/null
          fi
        done
    
    - name: コード品質分析
      if: steps.projects.outputs.projects != ''
      env:
        CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
      run: |
        claude -p "
        プロジェクトのコード品質を分析してください：

        対象プロジェクト: implementations/ ディレクトリ内の全プロジェクト
        参照標準: standards/ ディレクトリの開発標準

        分析項目:
        1. コード品質
           - コーディング規約の遵守
           - Spring Boot ベストプラクティス
           - 設計パターンの適用
           - コードの可読性と保守性
           - アーキテクチャの一貫性

        2. セキュリティ
           - SQLインジェクション対策
           - XSS攻撃防護
           - 認証・認可の実装
           - 入力バリデーション
           - セキュリティヘッダー設定

        3. パフォーマンス
           - データベースクエリの最適化
           - JPA設定の効率性
           - キャッシュ戦略
           - メモリ使用量
           - レスポンス時間最適化

        4. テスト品質
           - テストカバレッジ
           - テストの品質と妥当性
           - モックの適切な使用
           - エッジケースの考慮

        5. アーキテクチャ
           - レイヤー分離の適切性
           - 依存関係の管理
           - 設定管理の妥当性
           - エラーハンドリング

        結果を quality-report.md ファイルに出力してください。
        各項目について具体的な改善提案も含めてください。
        "
    
    - name: レポートをアップロード
      if: steps.projects.outputs.projects != ''
      uses: actions/upload-artifact@v4
      with:
        name: quality-reports
        path: quality-report.md
    
    - name: PR にコメント
      if: github.event_name == 'pull_request' && steps.projects.outputs.projects != ''
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          try {
            const report = fs.readFileSync('quality-report.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 📊 コード品質チェックレポート\n\n${report}\n\n📎 詳細レポートは Artifacts の quality-reports をご確認ください。`
            });
          } catch (error) {
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 📊 コード品質チェック\n\n品質レポートの生成中にエラーが発生しました。\nログを確認してください。`
            });
          }
```

## 開発標準ドキュメント

### 1. 開発標準 (standards/development-standards.md)

```markdown
# Spring Boot 開発標準

## 技術スタック
- **Java**: 17
- **フレームワーク**: Spring Boot 3.2+
- **データベース**: MySQL 8.0
- **ビルドツール**: Maven
- **テスト**: JUnit 5 + Mockito

## プロジェクト構造標準
```
implementations/{project-name}/
├── src/main/java/com/company/{domain}/
│   ├── controller/     # REST コントローラー
│   ├── service/        # ビジネスロジック層
│   ├── repository/     # データアクセス層
│   ├── entity/         # JPA エンティティ
│   ├── dto/           # データ転送オブジェクト
│   ├── config/        # 設定クラス
│   └── exception/     # 例外処理
├── src/main/resources/
│   ├── application.yml
│   └── application-test.yml
├── src/test/java/
├── pom.xml
└── README.md
```

## API 設計標準
- **バージョン管理**: `/api/v1/`
- **ヘルスチェック**: `/actuator/health`
- **CRUD 操作**:
  - GET `/api/v1/{resource}` - 一覧取得
  - GET `/api/v1/{resource}/{id}` - 単体取得
  - POST `/api/v1/{resource}` - 作成
  - PUT `/api/v1/{resource}/{id}` - 更新
  - DELETE `/api/v1/{resource}/{id}` - 削除

## コーディング規約
- Spring Boot Starter 依存関係を使用
- レイヤードアーキテクチャの実装
- JPA/Hibernate を使用したデータアクセス
- 統一例外処理
- 入力検証とデータバリデーション
- 単体テストカバレッジ > 80%
```

### 2. プロジェクト構造テンプレート (standards/project-structure.md)

```markdown
# Spring Boot プロジェクト構造テンプレート

## Maven 依存関係テンプレート
```xml
<dependencies>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-data-jpa</artifactId>
    </dependency>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-actuator</artifactId>
    </dependency>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-validation</artifactId>
    </dependency>
    <dependency>
        <groupId>mysql</groupId>
        <artifactId>mysql-connector-java</artifactId>
        <scope>runtime</scope>
    </dependency>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-test</artifactId>
        <scope>test</scope>
    </dependency>
</dependencies>
```

## 設定ファイルテンプレート
```yaml
spring:
  application:
    name: ${project.name}
  datasource:
    url: ${database.url}
    username: ${database.username}
    password: ${database.password}
    driver-class-name: com.mysql.cj.jdbc.Driver
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        format_sql: true

server:
  port: 8080

management:
  endpoints:
    web:
      exposure:
        include: health,info
  endpoint:
    health:
      show-details: always
```
```

### 3. 要件テンプレート (requirements/templates/requirement-template.md)

```markdown
# 要件タイトル

## 要件説明
[要件内容とビジネス背景の詳細説明]

## 機能要件
- [ ] コア機能1
- [ ] コア機能2
- [ ] コア機能3

## API 設計要件
- バージョン: v1
- パス接頭辞: /api/v1/
- ヘルスチェックエンドポイントを含む
- 基本的な CRUD 操作を実装

## データベース要件
- MySQL 8.0 を使用
- データベース命名規約に従う
- 必要なインデックス設計を含む

## 受け入れ基準
- [ ] 機能が正常に動作する
- [ ] API インターフェースが標準に準拠
- [ ] 単体テストカバレッジ > 80%
- [ ] コード品質チェックが通過

## 優先度
- [ ] 高 - [ ] 中 - [ ] 低

## 見積工期
[日数]

## 依存要件
[関連要件IDまたは無し]
```

## 使用方法

### ブランチ戦略とトリガー条件

#### **トリガータイミング概要**：
1. **要件分析**：`requirements/pending/` を変更する PR 時にトリガー
2. **自動開発**：`main` または `develop` ブランチにマージ時にトリガー  
3. **品質チェック**：`implementations/` への PR 時にトリガー

#### **推奨ワークフロー**：
```bash
# 1. 要件ブランチ作成
git checkout -b feature/user-management
echo "要件内容" > requirements/pending/user-management.md
git add . && git commit -m "ユーザー管理要件を追加"
git push origin feature/user-management

# 2. main ブランチへの PR 作成
# → 要件分析トリガー ✅

# 3. 要件分析レポート確認後、PR をマージ
# → 自動開発トリガー ✅

# 4. 自動開発完了後、実装コードの PR が自動作成される
# → コード品質チェックトリガー ✅
```

### 初期設定
1. プロジェクトディレクトリ構造を作成
2. GitHub Secrets に `CLAUDE_CODE_OAUTH_TOKEN` を追加
3. 開発標準ドキュメントをコミット

### ローカルでの Claude Code 使用

```bash
# 環境変数設定
export CLAUDE_CODE_OAUTH_TOKEN=your-token

# Claude Code 起動
cd your-project
claude

# 非対話モードでの使用
claude -p "requirements/pending/ の要件を分析してください"

# ファイル指定での作業
claude -p "@requirements/pending/user-management.md この要件を実装してください"
```

## 実装例：ユーザー管理システム

### 要件ファイル例 (requirements/pending/user-management.md)
```markdown
# ユーザー管理システム

## 要件説明
基本的なユーザー管理機能を実装し、ユーザー登録、ログイン、情報管理などを含む

## 機能要件
- [ ] ユーザー登録とログイン
- [ ] ユーザー情報の CRUD 操作
- [ ] ユーザーステータス管理

## API 設計要件
- バージョン: v1
- パス: /api/v1/users
- ヘルスチェック: /actuator/health
- CRUD 操作:
  - GET /api/v1/users - ユーザー一覧取得
  - GET /api/v1/users/{id} - ユーザー詳細取得
  - POST /api/v1/users - ユーザー作成
  - PUT /api/v1/users/{id} - ユーザー更新
  - DELETE /api/v1/users/{id} - ユーザー削除

## データベース要件
- ユーザーテーブル含む項目：id, username, email, password, status, created_at, updated_at
- username と email のユニーク制約
- 適切なインデックス設計

## 受け入れ基準
- [ ] 全ての API エンドポイントが正常動作
- [ ] データバリデーションと例外処理
- [ ] 単体テストカバレッジ > 80%
- [ ] API ドキュメント生成

## 優先度
- [x] 高

## 見積工期
3日
```

### 生成される予定のプロジェクト構造
```
implementations/requirement-impl-20240718-143022/
├── src/main/java/com/company/user/
│   ├── controller/UserController.java
│   ├── service/UserService.java
│   ├── repository/UserRepository.java
│   ├── entity/User.java
│   ├── dto/UserDto.java
│   └── exception/UserNotFoundException.java
├── src/main/resources/
│   ├── application.yml
│   └── application-test.yml
├── src/test/java/
├── pom.xml
└── README.md
```

### 生成される予定の API エンドポイント
- `GET /actuator/health` - ヘルスチェック
- `GET /api/v1/users` - ユーザー一覧
- `GET /api/v1/users/{id}` - ユーザー詳細
- `POST /api/v1/users` - ユーザー作成
- `PUT /api/v1/users/{id}` - ユーザー更新
- `DELETE /api/v1/users/{id}` - ユーザー削除

## トラブルシューティング

### 問題1: Claude Code認証エラー
**解決策**: 
```bash
# OAuth Token の確認
echo $CLAUDE_CODE_OAUTH_TOKEN
# 再認証
claude auth
```

### 問題2: 自動開発がトリガーされない
**解決策**:
1. 手動トリガーを使用: GitHub Actions画面から workflow_dispatch を実行
2. ログを確認してファイル検出ロジックをデバッグ

### 問題3: プロジェクト生成の失敗
**解決策**:
1. Claude Code のプロンプトをより具体的に修正
2. 段階的な実装に分割
3. エラーログの確認

## まとめ

この環境により、要件定義から実装、テスト、デプロイまでの開発プロセスが大幅に自動化され、開発効率の向上とコード品質の安定化を実現できます。

### 主な利点
- 🚀 **開発速度向上**: Claude Code による自動実装
- 📊 **品質保証**: 自動テスト・品質チェック
- 🔄 **一貫性確保**: 標準化されたコード生成
- 👥 **チーム連携**: PR ベースのレビュープロセス
- 🛠️ **シンプル**: 複雑な設定ファイル不要
